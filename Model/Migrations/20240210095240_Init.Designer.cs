// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Model;

#nullable disable

namespace Model.Migrations
{
    [DbContext(typeof(DBApiContext))]
    [Migration("20240210095240_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Model.Modules.CategoryModel.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2051",
                            Name = "category name  28"
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2052",
                            Name = "category name  3"
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2053",
                            Name = "category name  5"
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2054",
                            Name = "category name  36"
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2055",
                            Name = "category name  46"
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2056",
                            Name = "category name  47"
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2057",
                            Name = "category name  30"
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2058",
                            Name = "category name  36"
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2059",
                            Name = "category name  32"
                        });
                });

            modelBuilder.Entity("Model.Modules.OrderModel.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2051",
                            Status = 0,
                            UserId = "79640b64-94d3-4cb2-89c8-a5fefe3c2051"
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2052",
                            Status = 0,
                            UserId = "79640b64-94d3-4cb2-89c8-a5fefe3c2052"
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2053",
                            Status = 0,
                            UserId = "79640b64-94d3-4cb2-89c8-a5fefe3c2053"
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2054",
                            Status = 0,
                            UserId = "79640b64-94d3-4cb2-89c8-a5fefe3c2054"
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2055",
                            Status = 0,
                            UserId = "79640b64-94d3-4cb2-89c8-a5fefe3c2055"
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2056",
                            Status = 0,
                            UserId = "79640b64-94d3-4cb2-89c8-a5fefe3c2056"
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2057",
                            Status = 0,
                            UserId = "79640b64-94d3-4cb2-89c8-a5fefe3c2057"
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2058",
                            Status = 0,
                            UserId = "79640b64-94d3-4cb2-89c8-a5fefe3c2058"
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2059",
                            Status = 0,
                            UserId = "79640b64-94d3-4cb2-89c8-a5fefe3c2059"
                        });
                });

            modelBuilder.Entity("Model.Modules.ProductModel.Product", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2051",
                            CategoryId = "79640b64-94d3-4cb2-89c8-a5fefe3c2051",
                            Image = "https://blob3tier.blob.core.windows.net/azureblobwith3tier/samurai.png%2B6775e8b2-a9ab-4792-afcd-202adae206f8",
                            Name = "ProductName 36",
                            Price = 2558m
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2052",
                            CategoryId = "79640b64-94d3-4cb2-89c8-a5fefe3c2052",
                            Image = "https://blob3tier.blob.core.windows.net/azureblobwith3tier/samurai.png%2B6775e8b2-a9ab-4792-afcd-202adae206f8",
                            Name = "ProductName 2",
                            Price = 2566m
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2053",
                            CategoryId = "79640b64-94d3-4cb2-89c8-a5fefe3c2053",
                            Image = "https://blob3tier.blob.core.windows.net/azureblobwith3tier/samurai.png%2B6775e8b2-a9ab-4792-afcd-202adae206f8",
                            Name = "ProductName 34",
                            Price = 2555m
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2054",
                            CategoryId = "79640b64-94d3-4cb2-89c8-a5fefe3c2054",
                            Image = "https://blob3tier.blob.core.windows.net/azureblobwith3tier/samurai.png%2B6775e8b2-a9ab-4792-afcd-202adae206f8",
                            Name = "ProductName 32",
                            Price = 2581m
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2055",
                            CategoryId = "79640b64-94d3-4cb2-89c8-a5fefe3c2055",
                            Image = "https://blob3tier.blob.core.windows.net/azureblobwith3tier/samurai.png%2B6775e8b2-a9ab-4792-afcd-202adae206f8",
                            Name = "ProductName 6",
                            Price = 2555m
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2056",
                            CategoryId = "79640b64-94d3-4cb2-89c8-a5fefe3c2056",
                            Image = "https://blob3tier.blob.core.windows.net/azureblobwith3tier/samurai.png%2B6775e8b2-a9ab-4792-afcd-202adae206f8",
                            Name = "ProductName 2",
                            Price = 2556m
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2057",
                            CategoryId = "79640b64-94d3-4cb2-89c8-a5fefe3c2057",
                            Image = "https://blob3tier.blob.core.windows.net/azureblobwith3tier/samurai.png%2B6775e8b2-a9ab-4792-afcd-202adae206f8",
                            Name = "ProductName 4",
                            Price = 2548m
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2058",
                            CategoryId = "79640b64-94d3-4cb2-89c8-a5fefe3c2058",
                            Image = "https://blob3tier.blob.core.windows.net/azureblobwith3tier/samurai.png%2B6775e8b2-a9ab-4792-afcd-202adae206f8",
                            Name = "ProductName 41",
                            Price = 2572m
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2059",
                            CategoryId = "79640b64-94d3-4cb2-89c8-a5fefe3c2059",
                            Image = "https://blob3tier.blob.core.windows.net/azureblobwith3tier/samurai.png%2B6775e8b2-a9ab-4792-afcd-202adae206f8",
                            Name = "ProductName 18",
                            Price = 2555m
                        });
                });

            modelBuilder.Entity("Model.Modules.ProductOrderModel.ProductOrder", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OrderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "OrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("ProductOrders");

                    b.HasData(
                        new
                        {
                            ProductId = "79640b64-94d3-4cb2-89c8-a5fefe3c2051",
                            OrderId = "79640b64-94d3-4cb2-89c8-a5fefe3c2051",
                            Quantity = 10
                        },
                        new
                        {
                            ProductId = "79640b64-94d3-4cb2-89c8-a5fefe3c2052",
                            OrderId = "79640b64-94d3-4cb2-89c8-a5fefe3c2052",
                            Quantity = 26
                        },
                        new
                        {
                            ProductId = "79640b64-94d3-4cb2-89c8-a5fefe3c2053",
                            OrderId = "79640b64-94d3-4cb2-89c8-a5fefe3c2053",
                            Quantity = 44
                        },
                        new
                        {
                            ProductId = "79640b64-94d3-4cb2-89c8-a5fefe3c2054",
                            OrderId = "79640b64-94d3-4cb2-89c8-a5fefe3c2054",
                            Quantity = 48
                        },
                        new
                        {
                            ProductId = "79640b64-94d3-4cb2-89c8-a5fefe3c2055",
                            OrderId = "79640b64-94d3-4cb2-89c8-a5fefe3c2055",
                            Quantity = 40
                        },
                        new
                        {
                            ProductId = "79640b64-94d3-4cb2-89c8-a5fefe3c2056",
                            OrderId = "79640b64-94d3-4cb2-89c8-a5fefe3c2056",
                            Quantity = 3
                        },
                        new
                        {
                            ProductId = "79640b64-94d3-4cb2-89c8-a5fefe3c2057",
                            OrderId = "79640b64-94d3-4cb2-89c8-a5fefe3c2057",
                            Quantity = 39
                        },
                        new
                        {
                            ProductId = "79640b64-94d3-4cb2-89c8-a5fefe3c2058",
                            OrderId = "79640b64-94d3-4cb2-89c8-a5fefe3c2058",
                            Quantity = 1
                        },
                        new
                        {
                            ProductId = "79640b64-94d3-4cb2-89c8-a5fefe3c2059",
                            OrderId = "79640b64-94d3-4cb2-89c8-a5fefe3c2059",
                            Quantity = 24
                        });
                });

            modelBuilder.Entity("Model.Modules.UserModel.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2051",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a494de60-3fbc-4a29-920a-1cafc134488c",
                            Email = "user43@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "nguyen",
                            LastName = "12",
                            LockoutEnabled = false,
                            PasswordHash = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3a7fd777-d3bc-4c76-b3b2-fad5a4376bfd",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2052",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d76065c2-de93-45c4-bdae-0df9b9360e1a",
                            Email = "user12@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "nguyen",
                            LastName = "26",
                            LockoutEnabled = false,
                            PasswordHash = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2bb27057-9c7c-4c5d-a354-35716739f8d2",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2053",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e1c853d5-fed4-4026-8bf0-b0518b5a6e1b",
                            Email = "user17@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "nguyen",
                            LastName = "49",
                            LockoutEnabled = false,
                            PasswordHash = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "45cb0027-c272-44d4-b440-9720f1737309",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2054",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ab397e33-2ed0-42b3-aee0-2ac3d3dd9b5f",
                            Email = "user49@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "nguyen",
                            LastName = "15",
                            LockoutEnabled = false,
                            PasswordHash = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "36f79761-3853-4639-97d5-f6f093c06b5b",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2055",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2874b2e5-bce3-4dc5-a643-2306fbec3a13",
                            Email = "user10@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "nguyen",
                            LastName = "30",
                            LockoutEnabled = false,
                            PasswordHash = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4558898c-3c4a-4133-be08-5b8e387d4cd4",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2056",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "740f9c3b-8fbe-4de7-a4df-11a3cd3437b6",
                            Email = "user41@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "nguyen",
                            LastName = "26",
                            LockoutEnabled = false,
                            PasswordHash = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5f6af64e-95b2-4e78-b42f-6938319e8f30",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2057",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7f260573-f742-4042-a2b1-7ef54de3cfa7",
                            Email = "user5@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "nguyen",
                            LastName = "36",
                            LockoutEnabled = false,
                            PasswordHash = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "40c6db99-1572-4727-a829-5f81e1fed6ba",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2058",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "112df2e7-db27-4866-82fc-9676df30fc62",
                            Email = "user14@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "nguyen",
                            LastName = "32",
                            LockoutEnabled = false,
                            PasswordHash = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "484a2813-ccd6-466e-ac97-0746298685dd",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2059",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cbce2753-80de-44a6-801a-9e59e8c6e84c",
                            Email = "user28@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "nguyen",
                            LastName = "25",
                            LockoutEnabled = false,
                            PasswordHash = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2f4cd872-2ca4-4da4-8edf-e6ddaacfcac1",
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Model.Modules.UserModel.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Model.Modules.UserModel.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Modules.UserModel.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Model.Modules.UserModel.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Modules.OrderModel.Order", b =>
                {
                    b.HasOne("Model.Modules.UserModel.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Model.Modules.ProductModel.Product", b =>
                {
                    b.HasOne("Model.Modules.CategoryModel.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Model.Modules.ProductOrderModel.ProductOrder", b =>
                {
                    b.HasOne("Model.Modules.OrderModel.Order", "Order")
                        .WithMany("ProductOrders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Modules.ProductModel.Product", "Product")
                        .WithMany("ProductOrders")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Model.Modules.CategoryModel.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Model.Modules.OrderModel.Order", b =>
                {
                    b.Navigation("ProductOrders");
                });

            modelBuilder.Entity("Model.Modules.ProductModel.Product", b =>
                {
                    b.Navigation("ProductOrders");
                });

            modelBuilder.Entity("Model.Modules.UserModel.User", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
