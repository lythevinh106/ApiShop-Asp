// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Model;

#nullable disable

namespace Model.Migrations
{
    [DbContext(typeof(DBApiContext))]
    [Migration("20240217115959_addDateTimeAll")]
    partial class addDateTimeAll
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Model.Modules.CategoryModel.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2051",
                            Name = "category name  25",
                            Time = new DateTime(2024, 2, 17, 18, 59, 59, 106, DateTimeKind.Local).AddTicks(9486)
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2052",
                            Name = "category name  9",
                            Time = new DateTime(2024, 2, 17, 18, 59, 59, 106, DateTimeKind.Local).AddTicks(9498)
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2053",
                            Name = "category name  41",
                            Time = new DateTime(2024, 2, 17, 18, 59, 59, 106, DateTimeKind.Local).AddTicks(9501)
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2054",
                            Name = "category name  29",
                            Time = new DateTime(2024, 2, 17, 18, 59, 59, 106, DateTimeKind.Local).AddTicks(9507)
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2055",
                            Name = "category name  10",
                            Time = new DateTime(2024, 2, 17, 18, 59, 59, 106, DateTimeKind.Local).AddTicks(9510)
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2056",
                            Name = "category name  46",
                            Time = new DateTime(2024, 2, 17, 18, 59, 59, 106, DateTimeKind.Local).AddTicks(9514)
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2057",
                            Name = "category name  48",
                            Time = new DateTime(2024, 2, 17, 18, 59, 59, 106, DateTimeKind.Local).AddTicks(9517)
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2058",
                            Name = "category name  18",
                            Time = new DateTime(2024, 2, 17, 18, 59, 59, 106, DateTimeKind.Local).AddTicks(9521)
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2059",
                            Name = "category name  5",
                            Time = new DateTime(2024, 2, 17, 18, 59, 59, 106, DateTimeKind.Local).AddTicks(9524)
                        });
                });

            modelBuilder.Entity("Model.Modules.OrderModel.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2051",
                            Status = 0,
                            Time = new DateTime(2024, 2, 17, 18, 59, 59, 106, DateTimeKind.Local).AddTicks(9337),
                            UserId = "79640b64-94d3-4cb2-89c8-a5fefe3c2051"
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2052",
                            Status = 0,
                            Time = new DateTime(2024, 2, 17, 18, 59, 59, 106, DateTimeKind.Local).AddTicks(9339),
                            UserId = "79640b64-94d3-4cb2-89c8-a5fefe3c2052"
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2053",
                            Status = 0,
                            Time = new DateTime(2024, 2, 17, 18, 59, 59, 106, DateTimeKind.Local).AddTicks(9340),
                            UserId = "79640b64-94d3-4cb2-89c8-a5fefe3c2053"
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2054",
                            Status = 0,
                            Time = new DateTime(2024, 2, 17, 18, 59, 59, 106, DateTimeKind.Local).AddTicks(9341),
                            UserId = "79640b64-94d3-4cb2-89c8-a5fefe3c2054"
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2055",
                            Status = 0,
                            Time = new DateTime(2024, 2, 17, 18, 59, 59, 106, DateTimeKind.Local).AddTicks(9342),
                            UserId = "79640b64-94d3-4cb2-89c8-a5fefe3c2055"
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2056",
                            Status = 0,
                            Time = new DateTime(2024, 2, 17, 18, 59, 59, 106, DateTimeKind.Local).AddTicks(9343),
                            UserId = "79640b64-94d3-4cb2-89c8-a5fefe3c2056"
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2057",
                            Status = 0,
                            Time = new DateTime(2024, 2, 17, 18, 59, 59, 106, DateTimeKind.Local).AddTicks(9344),
                            UserId = "79640b64-94d3-4cb2-89c8-a5fefe3c2057"
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2058",
                            Status = 0,
                            Time = new DateTime(2024, 2, 17, 18, 59, 59, 106, DateTimeKind.Local).AddTicks(9345),
                            UserId = "79640b64-94d3-4cb2-89c8-a5fefe3c2058"
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2059",
                            Status = 0,
                            Time = new DateTime(2024, 2, 17, 18, 59, 59, 106, DateTimeKind.Local).AddTicks(9346),
                            UserId = "79640b64-94d3-4cb2-89c8-a5fefe3c2059"
                        });
                });

            modelBuilder.Entity("Model.Modules.ProductModel.Product", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2051",
                            CategoryId = "79640b64-94d3-4cb2-89c8-a5fefe3c2051",
                            Description = "Mô tả điện thoại",
                            Image = "https://blob3tier.blob.core.windows.net/azureblobwith3tier/samurai.png%2B6775e8b2-a9ab-4792-afcd-202adae206f8",
                            Name = "ProductName 3",
                            Price = 2559m,
                            Time = new DateTime(2024, 2, 17, 18, 59, 59, 106, DateTimeKind.Local).AddTicks(9194)
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2052",
                            CategoryId = "79640b64-94d3-4cb2-89c8-a5fefe3c2052",
                            Description = "Mô tả điện thoại",
                            Image = "https://blob3tier.blob.core.windows.net/azureblobwith3tier/samurai.png%2B6775e8b2-a9ab-4792-afcd-202adae206f8",
                            Name = "ProductName 14",
                            Price = 2567m,
                            Time = new DateTime(2024, 2, 17, 18, 59, 59, 106, DateTimeKind.Local).AddTicks(9212)
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2053",
                            CategoryId = "79640b64-94d3-4cb2-89c8-a5fefe3c2053",
                            Description = "Mô tả điện thoại",
                            Image = "https://blob3tier.blob.core.windows.net/azureblobwith3tier/samurai.png%2B6775e8b2-a9ab-4792-afcd-202adae206f8",
                            Name = "ProductName 17",
                            Price = 2571m,
                            Time = new DateTime(2024, 2, 17, 18, 59, 59, 106, DateTimeKind.Local).AddTicks(9216)
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2054",
                            CategoryId = "79640b64-94d3-4cb2-89c8-a5fefe3c2054",
                            Description = "Mô tả điện thoại",
                            Image = "https://blob3tier.blob.core.windows.net/azureblobwith3tier/samurai.png%2B6775e8b2-a9ab-4792-afcd-202adae206f8",
                            Name = "ProductName 47",
                            Price = 2567m,
                            Time = new DateTime(2024, 2, 17, 18, 59, 59, 106, DateTimeKind.Local).AddTicks(9222)
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2055",
                            CategoryId = "79640b64-94d3-4cb2-89c8-a5fefe3c2055",
                            Description = "Mô tả điện thoại",
                            Image = "https://blob3tier.blob.core.windows.net/azureblobwith3tier/samurai.png%2B6775e8b2-a9ab-4792-afcd-202adae206f8",
                            Name = "ProductName 16",
                            Price = 2566m,
                            Time = new DateTime(2024, 2, 17, 18, 59, 59, 106, DateTimeKind.Local).AddTicks(9225)
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2056",
                            CategoryId = "79640b64-94d3-4cb2-89c8-a5fefe3c2056",
                            Description = "Mô tả điện thoại",
                            Image = "https://blob3tier.blob.core.windows.net/azureblobwith3tier/samurai.png%2B6775e8b2-a9ab-4792-afcd-202adae206f8",
                            Name = "ProductName 30",
                            Price = 2549m,
                            Time = new DateTime(2024, 2, 17, 18, 59, 59, 106, DateTimeKind.Local).AddTicks(9232)
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2057",
                            CategoryId = "79640b64-94d3-4cb2-89c8-a5fefe3c2057",
                            Description = "Mô tả điện thoại",
                            Image = "https://blob3tier.blob.core.windows.net/azureblobwith3tier/samurai.png%2B6775e8b2-a9ab-4792-afcd-202adae206f8",
                            Name = "ProductName 42",
                            Price = 2551m,
                            Time = new DateTime(2024, 2, 17, 18, 59, 59, 106, DateTimeKind.Local).AddTicks(9235)
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2058",
                            CategoryId = "79640b64-94d3-4cb2-89c8-a5fefe3c2058",
                            Description = "Mô tả điện thoại",
                            Image = "https://blob3tier.blob.core.windows.net/azureblobwith3tier/samurai.png%2B6775e8b2-a9ab-4792-afcd-202adae206f8",
                            Name = "ProductName 30",
                            Price = 2581m,
                            Time = new DateTime(2024, 2, 17, 18, 59, 59, 106, DateTimeKind.Local).AddTicks(9240)
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2059",
                            CategoryId = "79640b64-94d3-4cb2-89c8-a5fefe3c2059",
                            Description = "Mô tả điện thoại",
                            Image = "https://blob3tier.blob.core.windows.net/azureblobwith3tier/samurai.png%2B6775e8b2-a9ab-4792-afcd-202adae206f8",
                            Name = "ProductName 6",
                            Price = 2567m,
                            Time = new DateTime(2024, 2, 17, 18, 59, 59, 106, DateTimeKind.Local).AddTicks(9243)
                        });
                });

            modelBuilder.Entity("Model.Modules.ProductOrderModel.ProductOrder", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OrderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("ProductId", "OrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("ProductOrders");

                    b.HasData(
                        new
                        {
                            ProductId = "79640b64-94d3-4cb2-89c8-a5fefe3c2051",
                            OrderId = "79640b64-94d3-4cb2-89c8-a5fefe3c2051",
                            Quantity = 38,
                            Time = new DateTime(2024, 2, 17, 18, 59, 59, 106, DateTimeKind.Local).AddTicks(9041)
                        },
                        new
                        {
                            ProductId = "79640b64-94d3-4cb2-89c8-a5fefe3c2052",
                            OrderId = "79640b64-94d3-4cb2-89c8-a5fefe3c2052",
                            Quantity = 31,
                            Time = new DateTime(2024, 2, 17, 18, 59, 59, 106, DateTimeKind.Local).AddTicks(9047)
                        },
                        new
                        {
                            ProductId = "79640b64-94d3-4cb2-89c8-a5fefe3c2053",
                            OrderId = "79640b64-94d3-4cb2-89c8-a5fefe3c2053",
                            Quantity = 19,
                            Time = new DateTime(2024, 2, 17, 18, 59, 59, 106, DateTimeKind.Local).AddTicks(9051)
                        },
                        new
                        {
                            ProductId = "79640b64-94d3-4cb2-89c8-a5fefe3c2054",
                            OrderId = "79640b64-94d3-4cb2-89c8-a5fefe3c2054",
                            Quantity = 41,
                            Time = new DateTime(2024, 2, 17, 18, 59, 59, 106, DateTimeKind.Local).AddTicks(9052)
                        },
                        new
                        {
                            ProductId = "79640b64-94d3-4cb2-89c8-a5fefe3c2055",
                            OrderId = "79640b64-94d3-4cb2-89c8-a5fefe3c2055",
                            Quantity = 41,
                            Time = new DateTime(2024, 2, 17, 18, 59, 59, 106, DateTimeKind.Local).AddTicks(9054)
                        },
                        new
                        {
                            ProductId = "79640b64-94d3-4cb2-89c8-a5fefe3c2056",
                            OrderId = "79640b64-94d3-4cb2-89c8-a5fefe3c2056",
                            Quantity = 15,
                            Time = new DateTime(2024, 2, 17, 18, 59, 59, 106, DateTimeKind.Local).AddTicks(9056)
                        },
                        new
                        {
                            ProductId = "79640b64-94d3-4cb2-89c8-a5fefe3c2057",
                            OrderId = "79640b64-94d3-4cb2-89c8-a5fefe3c2057",
                            Quantity = 20,
                            Time = new DateTime(2024, 2, 17, 18, 59, 59, 106, DateTimeKind.Local).AddTicks(9060)
                        },
                        new
                        {
                            ProductId = "79640b64-94d3-4cb2-89c8-a5fefe3c2058",
                            OrderId = "79640b64-94d3-4cb2-89c8-a5fefe3c2058",
                            Quantity = 28,
                            Time = new DateTime(2024, 2, 17, 18, 59, 59, 106, DateTimeKind.Local).AddTicks(9061)
                        },
                        new
                        {
                            ProductId = "79640b64-94d3-4cb2-89c8-a5fefe3c2059",
                            OrderId = "79640b64-94d3-4cb2-89c8-a5fefe3c2059",
                            Quantity = 40,
                            Time = new DateTime(2024, 2, 17, 18, 59, 59, 106, DateTimeKind.Local).AddTicks(9062)
                        });
                });

            modelBuilder.Entity("Model.Modules.UserModel.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2051",
                            AccessFailedCount = 0,
                            Address = "Dia chi 21",
                            ConcurrencyStamp = "6d8ab6e4-67cb-4c2b-9f28-15c7a60bc9b5",
                            Email = "user40@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "nguyen",
                            LastName = "26",
                            LockoutEnabled = false,
                            PasswordHash = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3bef880e-5bde-4e10-82af-68207e9dee79",
                            Time = new DateTime(2024, 2, 17, 18, 59, 59, 106, DateTimeKind.Local).AddTicks(8500),
                            TwoFactorEnabled = false,
                            UserName = "nguyen8"
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2052",
                            AccessFailedCount = 0,
                            Address = "Dia chi 10",
                            ConcurrencyStamp = "cead261f-a889-44bf-8d91-7dc6b4112e1a",
                            Email = "user27@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "nguyen",
                            LastName = "40",
                            LockoutEnabled = false,
                            PasswordHash = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b680a803-fdb0-4781-9169-8dcd7d32c8af",
                            Time = new DateTime(2024, 2, 17, 18, 59, 59, 106, DateTimeKind.Local).AddTicks(8602),
                            TwoFactorEnabled = false,
                            UserName = "nguyen43"
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2053",
                            AccessFailedCount = 0,
                            Address = "Dia chi 7",
                            ConcurrencyStamp = "b8ab4a8b-952b-4d86-8267-293f91ef6341",
                            Email = "user18@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "nguyen",
                            LastName = "21",
                            LockoutEnabled = false,
                            PasswordHash = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c01b08e6-486d-419e-9371-132b7ed720d2",
                            Time = new DateTime(2024, 2, 17, 18, 59, 59, 106, DateTimeKind.Local).AddTicks(8618),
                            TwoFactorEnabled = false,
                            UserName = "nguyen2"
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2054",
                            AccessFailedCount = 0,
                            Address = "Dia chi 38",
                            ConcurrencyStamp = "b50a5723-cf79-4d02-856d-0a057555f520",
                            Email = "user44@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "nguyen",
                            LastName = "20",
                            LockoutEnabled = false,
                            PasswordHash = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9ec47c0c-1afb-4e39-b613-ccdafad6b6e0",
                            Time = new DateTime(2024, 2, 17, 18, 59, 59, 106, DateTimeKind.Local).AddTicks(8631),
                            TwoFactorEnabled = false,
                            UserName = "nguyen47"
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2055",
                            AccessFailedCount = 0,
                            Address = "Dia chi 14",
                            ConcurrencyStamp = "24df6539-336a-4655-b048-61a5d0d14da2",
                            Email = "user4@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "nguyen",
                            LastName = "39",
                            LockoutEnabled = false,
                            PasswordHash = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b8c2138d-7d63-4686-8305-6e435506d131",
                            Time = new DateTime(2024, 2, 17, 18, 59, 59, 106, DateTimeKind.Local).AddTicks(8643),
                            TwoFactorEnabled = false,
                            UserName = "nguyen45"
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2056",
                            AccessFailedCount = 0,
                            Address = "Dia chi 36",
                            ConcurrencyStamp = "5b8bbd3c-73a4-4b42-a5d9-f5aa1c613666",
                            Email = "user23@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "nguyen",
                            LastName = "18",
                            LockoutEnabled = false,
                            PasswordHash = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b151d980-1881-487d-9852-d099452c7e25",
                            Time = new DateTime(2024, 2, 17, 18, 59, 59, 106, DateTimeKind.Local).AddTicks(8690),
                            TwoFactorEnabled = false,
                            UserName = "nguyen34"
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2057",
                            AccessFailedCount = 0,
                            Address = "Dia chi 2",
                            ConcurrencyStamp = "f34c0ce9-5569-4135-bc7a-a02b97f9a312",
                            Email = "user49@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "nguyen",
                            LastName = "33",
                            LockoutEnabled = false,
                            PasswordHash = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "73384b3c-1ef0-410b-b05b-f9ba14d82b0e",
                            Time = new DateTime(2024, 2, 17, 18, 59, 59, 106, DateTimeKind.Local).AddTicks(8715),
                            TwoFactorEnabled = false,
                            UserName = "nguyen11"
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2058",
                            AccessFailedCount = 0,
                            Address = "Dia chi 21",
                            ConcurrencyStamp = "55642932-873d-4c77-a46e-ac4d569f85dc",
                            Email = "user33@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "nguyen",
                            LastName = "47",
                            LockoutEnabled = false,
                            PasswordHash = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "de176592-c6c2-4c9f-9caa-fe6606cb0784",
                            Time = new DateTime(2024, 2, 17, 18, 59, 59, 106, DateTimeKind.Local).AddTicks(8727),
                            TwoFactorEnabled = false,
                            UserName = "nguyen39"
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2059",
                            AccessFailedCount = 0,
                            Address = "Dia chi 7",
                            ConcurrencyStamp = "5d55def5-e3f7-4679-bda9-68bffffac6ee",
                            Email = "user48@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "nguyen",
                            LastName = "42",
                            LockoutEnabled = false,
                            PasswordHash = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5cd9b1f2-63f6-4325-89ba-057712f94cb5",
                            Time = new DateTime(2024, 2, 17, 18, 59, 59, 106, DateTimeKind.Local).AddTicks(8740),
                            TwoFactorEnabled = false,
                            UserName = "nguyen30"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Model.Modules.UserModel.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Model.Modules.UserModel.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Modules.UserModel.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Model.Modules.UserModel.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Modules.OrderModel.Order", b =>
                {
                    b.HasOne("Model.Modules.UserModel.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Model.Modules.ProductModel.Product", b =>
                {
                    b.HasOne("Model.Modules.CategoryModel.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Model.Modules.ProductOrderModel.ProductOrder", b =>
                {
                    b.HasOne("Model.Modules.OrderModel.Order", "Order")
                        .WithMany("ProductOrders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Modules.ProductModel.Product", "Product")
                        .WithMany("ProductOrders")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Model.Modules.CategoryModel.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Model.Modules.OrderModel.Order", b =>
                {
                    b.Navigation("ProductOrders");
                });

            modelBuilder.Entity("Model.Modules.ProductModel.Product", b =>
                {
                    b.Navigation("ProductOrders");
                });

            modelBuilder.Entity("Model.Modules.UserModel.User", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
