// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Model;

#nullable disable

namespace Model.Migrations
{
    [DbContext(typeof(DBApiContext))]
    partial class DBApiContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Model.Modules.CategoryModel.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2051",
                            Name = "category name  38"
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2052",
                            Name = "category name  49"
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2053",
                            Name = "category name  47"
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2054",
                            Name = "category name  15"
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2055",
                            Name = "category name  47"
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2056",
                            Name = "category name  27"
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2057",
                            Name = "category name  38"
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2058",
                            Name = "category name  8"
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2059",
                            Name = "category name  11"
                        });
                });

            modelBuilder.Entity("Model.Modules.OrderModel.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2051",
                            Status = 0,
                            UserId = "79640b64-94d3-4cb2-89c8-a5fefe3c2051"
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2052",
                            Status = 0,
                            UserId = "79640b64-94d3-4cb2-89c8-a5fefe3c2052"
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2053",
                            Status = 0,
                            UserId = "79640b64-94d3-4cb2-89c8-a5fefe3c2053"
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2054",
                            Status = 0,
                            UserId = "79640b64-94d3-4cb2-89c8-a5fefe3c2054"
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2055",
                            Status = 0,
                            UserId = "79640b64-94d3-4cb2-89c8-a5fefe3c2055"
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2056",
                            Status = 0,
                            UserId = "79640b64-94d3-4cb2-89c8-a5fefe3c2056"
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2057",
                            Status = 0,
                            UserId = "79640b64-94d3-4cb2-89c8-a5fefe3c2057"
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2058",
                            Status = 0,
                            UserId = "79640b64-94d3-4cb2-89c8-a5fefe3c2058"
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2059",
                            Status = 0,
                            UserId = "79640b64-94d3-4cb2-89c8-a5fefe3c2059"
                        });
                });

            modelBuilder.Entity("Model.Modules.ProductModel.Product", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2051",
                            CategoryId = "79640b64-94d3-4cb2-89c8-a5fefe3c2051",
                            Description = "Mô tả điện thoại",
                            Image = "https://blob3tier.blob.core.windows.net/azureblobwith3tier/samurai.png%2B6775e8b2-a9ab-4792-afcd-202adae206f8",
                            Name = "ProductName 30",
                            Price = 2563m
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2052",
                            CategoryId = "79640b64-94d3-4cb2-89c8-a5fefe3c2052",
                            Description = "Mô tả điện thoại",
                            Image = "https://blob3tier.blob.core.windows.net/azureblobwith3tier/samurai.png%2B6775e8b2-a9ab-4792-afcd-202adae206f8",
                            Name = "ProductName 17",
                            Price = 2548m
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2053",
                            CategoryId = "79640b64-94d3-4cb2-89c8-a5fefe3c2053",
                            Description = "Mô tả điện thoại",
                            Image = "https://blob3tier.blob.core.windows.net/azureblobwith3tier/samurai.png%2B6775e8b2-a9ab-4792-afcd-202adae206f8",
                            Name = "ProductName 46",
                            Price = 2559m
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2054",
                            CategoryId = "79640b64-94d3-4cb2-89c8-a5fefe3c2054",
                            Description = "Mô tả điện thoại",
                            Image = "https://blob3tier.blob.core.windows.net/azureblobwith3tier/samurai.png%2B6775e8b2-a9ab-4792-afcd-202adae206f8",
                            Name = "ProductName 29",
                            Price = 2538m
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2055",
                            CategoryId = "79640b64-94d3-4cb2-89c8-a5fefe3c2055",
                            Description = "Mô tả điện thoại",
                            Image = "https://blob3tier.blob.core.windows.net/azureblobwith3tier/samurai.png%2B6775e8b2-a9ab-4792-afcd-202adae206f8",
                            Name = "ProductName 44",
                            Price = 2559m
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2056",
                            CategoryId = "79640b64-94d3-4cb2-89c8-a5fefe3c2056",
                            Description = "Mô tả điện thoại",
                            Image = "https://blob3tier.blob.core.windows.net/azureblobwith3tier/samurai.png%2B6775e8b2-a9ab-4792-afcd-202adae206f8",
                            Name = "ProductName 18",
                            Price = 2573m
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2057",
                            CategoryId = "79640b64-94d3-4cb2-89c8-a5fefe3c2057",
                            Description = "Mô tả điện thoại",
                            Image = "https://blob3tier.blob.core.windows.net/azureblobwith3tier/samurai.png%2B6775e8b2-a9ab-4792-afcd-202adae206f8",
                            Name = "ProductName 11",
                            Price = 2547m
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2058",
                            CategoryId = "79640b64-94d3-4cb2-89c8-a5fefe3c2058",
                            Description = "Mô tả điện thoại",
                            Image = "https://blob3tier.blob.core.windows.net/azureblobwith3tier/samurai.png%2B6775e8b2-a9ab-4792-afcd-202adae206f8",
                            Name = "ProductName 2",
                            Price = 2557m
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2059",
                            CategoryId = "79640b64-94d3-4cb2-89c8-a5fefe3c2059",
                            Description = "Mô tả điện thoại",
                            Image = "https://blob3tier.blob.core.windows.net/azureblobwith3tier/samurai.png%2B6775e8b2-a9ab-4792-afcd-202adae206f8",
                            Name = "ProductName 4",
                            Price = 2569m
                        });
                });

            modelBuilder.Entity("Model.Modules.ProductOrderModel.ProductOrder", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OrderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "OrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("ProductOrders");

                    b.HasData(
                        new
                        {
                            ProductId = "79640b64-94d3-4cb2-89c8-a5fefe3c2051",
                            OrderId = "79640b64-94d3-4cb2-89c8-a5fefe3c2051",
                            Quantity = 16
                        },
                        new
                        {
                            ProductId = "79640b64-94d3-4cb2-89c8-a5fefe3c2052",
                            OrderId = "79640b64-94d3-4cb2-89c8-a5fefe3c2052",
                            Quantity = 30
                        },
                        new
                        {
                            ProductId = "79640b64-94d3-4cb2-89c8-a5fefe3c2053",
                            OrderId = "79640b64-94d3-4cb2-89c8-a5fefe3c2053",
                            Quantity = 38
                        },
                        new
                        {
                            ProductId = "79640b64-94d3-4cb2-89c8-a5fefe3c2054",
                            OrderId = "79640b64-94d3-4cb2-89c8-a5fefe3c2054",
                            Quantity = 38
                        },
                        new
                        {
                            ProductId = "79640b64-94d3-4cb2-89c8-a5fefe3c2055",
                            OrderId = "79640b64-94d3-4cb2-89c8-a5fefe3c2055",
                            Quantity = 38
                        },
                        new
                        {
                            ProductId = "79640b64-94d3-4cb2-89c8-a5fefe3c2056",
                            OrderId = "79640b64-94d3-4cb2-89c8-a5fefe3c2056",
                            Quantity = 10
                        },
                        new
                        {
                            ProductId = "79640b64-94d3-4cb2-89c8-a5fefe3c2057",
                            OrderId = "79640b64-94d3-4cb2-89c8-a5fefe3c2057",
                            Quantity = 44
                        },
                        new
                        {
                            ProductId = "79640b64-94d3-4cb2-89c8-a5fefe3c2058",
                            OrderId = "79640b64-94d3-4cb2-89c8-a5fefe3c2058",
                            Quantity = 19
                        },
                        new
                        {
                            ProductId = "79640b64-94d3-4cb2-89c8-a5fefe3c2059",
                            OrderId = "79640b64-94d3-4cb2-89c8-a5fefe3c2059",
                            Quantity = 45
                        });
                });

            modelBuilder.Entity("Model.Modules.UserModel.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2051",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6ce9dd0e-de66-44b6-8ba3-00b7c9e07107",
                            Email = "user13@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "nguyen",
                            LastName = "37",
                            LockoutEnabled = false,
                            PasswordHash = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0580c64f-039d-4d3b-bab5-d77b1f33f8fc",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2052",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b8e8bf51-a2b7-4f0e-aefb-7b14d3732b47",
                            Email = "user25@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "nguyen",
                            LastName = "2",
                            LockoutEnabled = false,
                            PasswordHash = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e739bacb-e89e-47e9-9cd9-a4090612944f",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2053",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "85ccd1e5-0365-41db-83b2-7973610f8c11",
                            Email = "user34@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "nguyen",
                            LastName = "44",
                            LockoutEnabled = false,
                            PasswordHash = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1e65c994-739b-4e09-8065-ef95bcaaae74",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2054",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9c7ee594-f6a5-44fb-8ed4-16d2c2957c27",
                            Email = "user41@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "nguyen",
                            LastName = "26",
                            LockoutEnabled = false,
                            PasswordHash = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2b6e31f1-82ba-44c0-8f53-f4e441d9acb0",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2055",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8e254b2e-0853-42d2-831f-2bc979ea6591",
                            Email = "user9@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "nguyen",
                            LastName = "23",
                            LockoutEnabled = false,
                            PasswordHash = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2c2bc2f7-0297-410c-bc6a-c8421d79824e",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2056",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c9ded8a4-1261-4461-a39e-54967c2dd795",
                            Email = "user2@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "nguyen",
                            LastName = "36",
                            LockoutEnabled = false,
                            PasswordHash = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "456bcdec-5bcb-43b1-93df-04bdec0a48fa",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2057",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ce6853b7-a690-4111-82f2-0ea323e9afab",
                            Email = "user33@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "nguyen",
                            LastName = "48",
                            LockoutEnabled = false,
                            PasswordHash = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fefc0344-45f2-4dd5-8891-8b0b8a079924",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2058",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "769a96a5-5b7b-4041-97c4-3cbf25f522c4",
                            Email = "user35@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "nguyen",
                            LastName = "36",
                            LockoutEnabled = false,
                            PasswordHash = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "71169b04-d6fe-4b8e-bee4-b2f56e2bbe53",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2059",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4fb9c52f-f356-43f2-bc70-d356ef9bf8e4",
                            Email = "user37@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "nguyen",
                            LastName = "18",
                            LockoutEnabled = false,
                            PasswordHash = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "463cfe01-5c9f-4c92-bead-666bc52a9db7",
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Model.Modules.UserModel.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Model.Modules.UserModel.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Modules.UserModel.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Model.Modules.UserModel.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Modules.OrderModel.Order", b =>
                {
                    b.HasOne("Model.Modules.UserModel.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Model.Modules.ProductModel.Product", b =>
                {
                    b.HasOne("Model.Modules.CategoryModel.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Model.Modules.ProductOrderModel.ProductOrder", b =>
                {
                    b.HasOne("Model.Modules.OrderModel.Order", "Order")
                        .WithMany("ProductOrders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Modules.ProductModel.Product", "Product")
                        .WithMany("ProductOrders")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Model.Modules.CategoryModel.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Model.Modules.OrderModel.Order", b =>
                {
                    b.Navigation("ProductOrders");
                });

            modelBuilder.Entity("Model.Modules.ProductModel.Product", b =>
                {
                    b.Navigation("ProductOrders");
                });

            modelBuilder.Entity("Model.Modules.UserModel.User", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
