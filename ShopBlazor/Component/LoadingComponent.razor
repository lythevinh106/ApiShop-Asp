

@inject IState<LoadingState> loadingState
@inject JsHelper jsHelper
@implements IDisposable




@*<div>
        <Preload LoadingText="Loading..." />

        @childContent

    </div>*@





<style>
        @@charset "UTF-8";

        :root {
            --duration: 1.5s;
            --container-size: 250px;
            --box-size: 33px;
            --box-border-radius: 15%;
        }

        /*html,
    body {
      width: 100%;
      height: 100%;
      overflow: hidden;
      margin: 0;
      padding: 0;
      display: flex;
      justify-content: center;
      align-items: center;
    }*/

        #loading-animation {
            width: var(--container-size);
            display: flex;
            justify-content: space-between;
            align-items: center;
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
        }

        .📦 {
            width: var(--box-size);
            height: var(--box-size);
            position: relative;
            display: block;
            transform-origin: -50% center;
            border-radius: var(--box-border-radius);
        }

            .📦:after {
                content: "";
                width: 100%;
                height: 100%;
                position: absolute;
                top: 0;
                right: 0;
                background-color: lightblue;
                border-radius: var(--box-border-radius);
                box-shadow: 0px 0px 10px 0px rgba(28, 159, 255, 0.4);
            }

            .📦:nth-child(1) {
                animation: slide var(--duration) ease-in-out infinite alternate;
            }

                .📦:nth-child(1):after {
                    animation: color-change var(--duration) ease-in-out infinite alternate;
                }

            .📦:nth-child(2) {
                animation: flip-1 var(--duration) ease-in-out infinite alternate;
            }

                .📦:nth-child(2):after {
                    animation: squidge-1 var(--duration) ease-in-out infinite alternate;
                }

            .📦:nth-child(3) {
                animation: flip-2 var(--duration) ease-in-out infinite alternate;
            }

                .📦:nth-child(3):after {
                    animation: squidge-2 var(--duration) ease-in-out infinite alternate;
                }

            .📦:nth-child(4) {
                animation: flip-3 var(--duration) ease-in-out infinite alternate;
            }

                .📦:nth-child(4):after {
                    animation: squidge-3 var(--duration) ease-in-out infinite alternate;
                }

            .📦:nth-child(5) {
                animation: flip-4 var(--duration) ease-in-out infinite alternate;
            }

                .📦:nth-child(5):after {
                    animation: squidge-4 var(--duration) ease-in-out infinite alternate;
                }

            .📦:nth-child(2):after {
                background-color: #1c9fff;
            }

            .📦:nth-child(3):after {
                background-color: #1fb1fd;
            }

            .📦:nth-child(4):after {
                background-color: #22c7fb;
            }

            .📦:nth-child(5):after {
                background-color: #23d3fb;
            }

        @@keyframes slide {
            0% {
                background-color: #1795ff;
                transform: translatex(0vw);
            }

            100% {
                background-color: #23d3fb;
                transform: translatex( calc(var(--container-size) - (var(--box-size) * 1.25)) );
            }
        }

        @@keyframes color-change {
            0% {
                background-color: #1795ff;
            }

            100% {
                background-color: #23d3fb;
            }
        }

        @@keyframes flip-1 {
            0%,
            15% {
                transform: rotate(0);
            }

            35%,
            100% {
                transform: rotate(-180deg);
            }
        }

        @@keyframes squidge-1 {
            5% {
                transform-origin: center bottom;
                transform: scalex(1) scaley(1);
            }

            15% {
                transform-origin: center bottom;
                transform: scalex(1.3) scaley(0.7);
            }

            25%,
            20% {
                transform-origin: center bottom;
                transform: scalex(0.8) scaley(1.4);
            }

            55%,
            100% {
                transform-origin: center top;
                transform: scalex(1) scaley(1);
            }

            40% {
                transform-origin: center top;
                transform: scalex(1.3) scaley(0.7);
            }
        }

        @@keyframes flip-2 {
            0%,
            30% {
                transform: rotate(0);
            }

            50%,
            100% {
                transform: rotate(-180deg);
            }
        }

        @@keyframes squidge-2 {
            20% {
                transform-origin: center bottom;
                transform: scalex(1) scaley(1);
            }

            30% {
                transform-origin: center bottom;
                transform: scalex(1.3) scaley(0.7);
            }

            40%,
            35% {
                transform-origin: center bottom;
                transform: scalex(0.8) scaley(1.4);
            }

            70%,
            100% {
                transform-origin: center top;
                transform: scalex(1) scaley(1);
            }

            55% {
                transform-origin: center top;
                transform: scalex(1.3) scaley(0.7);
            }
        }

        @@keyframes flip-3 {
            0%,
            45% {
                transform: rotate(0);
            }

            65%,
            100% {
                transform: rotate(-180deg);
            }
        }

        @@keyframes squidge-3 {
            35% {
                transform-origin: center bottom;
                transform: scalex(1) scaley(1);
            }

            45% {
                transform-origin: center bottom;
                transform: scalex(1.3) scaley(0.7);
            }

            55%,
            50% {
                transform-origin: center bottom;
                transform: scalex(0.8) scaley(1.4);
            }

            85%,
            100% {
                transform-origin: center top;
                transform: scalex(1) scaley(1);
            }

            70% {
                transform-origin: center top;
                transform: scalex(1.3) scaley(0.7);
            }
        }

        @@keyframes flip-4 {
            0%,
            60% {
                transform: rotate(0);
            }

            80%,
            100% {
                transform: rotate(-180deg);
            }
        }

        @@keyframes squidge-4 {
            50% {
                transform-origin: center bottom;
                transform: scalex(1) scaley(1);
            }

            60% {
                transform-origin: center bottom;
                transform: scalex(1.3) scaley(0.7);
            }

            70%,
            65% {
                transform-origin: center bottom;
                transform: scalex(0.8) scaley(1.4);
            }

            100%,
            100% {
                transform-origin: center top;
                transform: scalex(1) scaley(1);
            }

            85% {
                transform-origin: center top;
                transform: scalex(1.3) scaley(0.7);
            }
        }


    #loading-animation-wrapper {
        position: absolute !important;
        /* top: 50%; */
        /* left: 50%; */
        /* transform: translate(-50%,-50%); */
        width: 100%;
        /* min-height: 100vh !important; */
        z-index: 999999 !important;
        background-color: rgba(0,0,0,0.5);
        min-height: 100% !important;
        width: 100% !important;
    }
</style>

@if (Show)
{

    <div id="loading-animation-wrapper">
        <div class="" id="loading-animation">
            <div class="📦"></div>
            <div class="📦"></div>
            <div class="📦"></div>
            <div class="📦"></div>
            <div class="📦"></div>
        </div>
    </div>


    <!-- dribbble -->
    <a class="dribbble" href="https://dribbble.com/shots/5533600-Loading-boxes" target="_blank">
        <img src="https://cdn.dribbble.com/assets/dribbble-ball-mark-2bd45f09c2fb58dbbfb44766d5d1d07c5a12972d602ef8b32204d28fa3dda554.svg" alt="">
    </a>
}








@code {


    [Parameter]
    public string? ExtraClass { get; set; } = "";


    public bool Show=false;

    private bool disposed;



    [Inject] protected PreloadService PreloadService { get; set; }

    protected async override void OnInitialized()
    {

        base.OnInitializedAsync();
        //   await loadingIndicator.Show();
    }

    protected async override Task OnParametersSetAsync()
    {
        base.OnParametersSetAsync();


    }

    protected async override void OnAfterRender(bool firstRender)
    {

        base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            loadingState.StateChanged += StateChanged;
        }


    }


    ///phuong thuc dc goi sau kho state change dien ra lam cho no re-render lại
    public void StateChanged(object sender, EventArgs args)
    {

        if (loadingState.Value._isActive)
        {
            Show = true;

        }
        else
        {
            Show = false;

        }
        InvokeAsync(StateHasChanged);//tương tu StateHasChanged()
    }
    void IDisposable.Dispose()
    {
        // Hủy đăng ký sự kiện khi component bị hủy bỏ : sau khi roi component
        if (!disposed)
        {
            jsHelper.Log("---test huy dispose--------");

            loadingState.StateChanged -= StateChanged;

            disposed = true;
        }
    }






}
