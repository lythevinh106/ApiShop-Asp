@page "/"

@using DtoShared.Pagging
@using DtoShared.ModulesDto
@using DtoShared.FetchData
@using ShopBlazor.Services.Order
@using ShopBlazor.Component;
@inject IDispatcher _dispatcher
@using ShopBlazor.Component.Form


<style>

    .custom-filter .dropdown-menu {
        display: none !important;
    }

    .custom-filter button {
        display: none !important;
    }

    .custom-filter input {
        padding: 6px 8px !important;
        position: relative;
        width: 100% !important;
    }

    .custom-filter th {
        padding: 6px 6px !important;
    }

    /*
        td {
            display:flex;
            text-align:center;
        }*/
</style>

@if (@allOrder == null)
{

}
else
{
    <AuthorizeView>

        <NotAuthorized>
            <h1>chua dang nhap</h1>
        </NotAuthorized>

        <Authorized>

            @*<h1>da dang nhap  @context.User.Identity.Name</h1>*@
        </Authorized>
    </AuthorizeView>

    <div class="row">
        <div class="col-xl-3 col-sm-6 mb-xl-0 mb-4">
            <div class="card">
                <div class="card-body p-3">
                    <div class="row">
                        <div class="col-8">
                            <div class="numbers">
                                <p class="text-sm mb-0 text-capitalize font-weight-bold">Doanh Thu Hôm Nay</p>
                               <h5 class="font-weight-bolder mb-0 fs-6 mt-2">
                                   @stringHelper.formatNumber((decimal)@orderinfo.dailyProfit)

                               </h5>
                            </div>
                        </div>
                        <div class="col-4 text-end">
                            <div class="icon icon-shape bg-gradient-primary shadow text-center border-radius-md">
                                <i class="ni ni-money-coins text-lg opacity-10" aria-hidden="true"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-xl-3 col-sm-6 mb-xl-0 mb-4">
            <div class="card">
                <div class="card-body p-3">
                    <div class="row">
                        <div class="col-8">
                            <div class="numbers">
                                <p class="text-sm mb-0 text-capitalize font-weight-bold"> SL Bán Hôm Nay</p>
                                <h5 class="font-weight-bolder mb-0">
                                    @orderinfo.dailySoldNumber
                                   
                                </h5>
                            </div>
                        </div>
                        <div class="col-4 text-end">
                            <div class="icon icon-shape bg-gradient-primary shadow text-center border-radius-md">
                                <i class="ni ni-world text-lg opacity-10" aria-hidden="true"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-xl-3 col-sm-6 mb-xl-0 mb-4">
            <div class="card">
                <div class="card-body p-3">
                    <div class="row">
                        <div class="col-8">
                            <div class="numbers">
                                <p class="text-sm mb-0 text-capitalize font-weight-bold">Doanh Thu Tháng</p>
                                <h5 class="font-weight-bolder mb-0 fs-6 mt-2">
                                    @stringHelper.formatNumber((decimal)@orderinfo.monthlyProfit)
                                   
                                </h5>
                            </div>
                        </div>
                        <div class="col-4 text-end">
                            <div class="icon icon-shape bg-gradient-primary shadow text-center border-radius-md">
                                <i class="ni ni-paper-diploma text-lg opacity-10" aria-hidden="true"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-xl-3 col-sm-6">
            <div class="card">
                <div class="card-body p-3">
                    <div class="row">
                        <div class="col-8">
                            <div class="numbers">
                                <p class="text-sm mb-0 text-capitalize font-weight-bold">Sl Bán 30 ngày </p>
                                <h5 class="font-weight-bolder mb-0">
                                    
                                    <span class="text-success text-sm font-weight-bolder"> @orderinfo.monthlySoldNumber </span>
                                </h5>
                            </div>
                        </div>
                        <div class="col-4 text-end">
                            <div class="icon icon-shape bg-gradient-primary shadow text-center border-radius-md">
                                <i class="ni ni-cart text-lg opacity-10" aria-hidden="true"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row mt-3">

        <div class="col-12  ">

            <div class="card mb-4 pb-4 bg-gray-100 ">

                <div class="rounded-2 background-module p-0  align-items-center mt-0  d-flex position-relative

                     " style="background-image: url(template/img/curved-images/curved0.jpg);
                   background-position-y: 50%;background-size:cover ; min-height:200px;">

                    <span class="mask bg-gradient-primary opacity-50 top-0 start-0 w-100 h-100 position-absolute "
                          style=" background-image:
                      linear-gradient(310deg, #7928CA 0%, #FF0080 100%);background-position:center center ;background-size:cover"></span>

                    <div class=" rounded-4 card-header  py-4  shadow-blur blur d-flex justify-content-between align-items-center   position-absolute start-50 translate-middle-x"
                         style="bottom: -15%; width: 92%; -webkit-backdrop-filter: saturate(200%) blur(30px);">

                        <div class="fw-normal d-flex align-items-center  ">

                            <ButtonComponent ClassEl="mx-1 ms-3" isDisable="true" size="Size.Large" color="ButtonColor.Primary">
                                <Icon Name="IconName.House" Color="IconColor.White"> </Icon>
                            </ButtonComponent>
                            <span class="h5 ms-2">
                                Đơn Đặt Hàng Sản Phẩm
                            </span>
                        </div>

                        @*<ButtonComponent ClassEl="mx-1 ms-3" color="ButtonColor.Primary"
                                             OnButtonClick="HandleShowCanvas2">
                                <span class="me-2 fw-bolder fs-6">Tạo</span> <Icon Name="IconName.PlusCircleFill" Color="IconColor.White"> </Icon>
                            </ButtonComponent>*@
               
                        
                        <select @onchange="HandleFilterChanged"  class="form-select w-50" aria-label="Default select example">

                            <option value="" selected>
                                Lọc Đơn Hàng
                            </option>
                            @foreach (var value in Enum.GetValues(typeof(DtoShared.Enums.StatusOrder)))
                            {
                                var name = Enum.GetName(typeof(DtoShared.Enums.StatusOrder), value);

                                <option value="@(value)">@stringHelper.GetDisplayName((DtoShared.Enums.StatusOrder)value)</option>
                            }
                        </select>
                 
                    </div>
                </div>

                <div class="card-body px-0 pt-0 pb-2 mt-5">
                    <div class="table-responsive p-0 position-relative " style="min-height:50vh">

                        <Grid ItemsPerPageText=""
                              @ref="grid"
                              PageSizeSelectorItems="Enumerable.Range(1, 3).ToArray()"
                              PaginationItemsTextFormat=""
                              DataProvider="OrderDataProvider"
                              Class="table table-hover table-bordered table-striped"
                              TItem="ProductOrderWithUserResponse"
                              Responsive="true"
                              PageSize="@pageSize"
                              AllowSorting="true"
                              AllowPaging="true"
                              AllowFiltering="true"
                              FiltersRowCssClass="custom-filter"
                              HeaderRowCssClass="text-uppercase text-secondary text-sm font-weight-bolder opacity-7  text-center">

                            <GridColumn TItem="@ProductOrderWithUserResponse" HeaderText="Thời Gian"
                                        Class=""
                                        Filterable="false"
                                        PropertyName="Time"
                                        SortString="Time"
                                        SortKeySelector="c=>c.Time"
                                        FilterTextboxWidth="100"
                                        IsDefaultSortColumn="true"
                                        SortDirection="SortDirection.Descending">

                                <div style="box-sizing: border-box; margin-top: 12px" class=" text-secondary text-xs font-weight-bold  text-center align-items-center ">  @context.Time</div>
                            </GridColumn>

                            <GridColumn Sortable="false"
                                        TItem="@ProductOrderWithUserResponse"
                                        Filterable="false"
                                        FilterOperator="FilterOperator.None"
                                        HeaderText="Trạng Thái" PropertyName="Status" FilterTextboxWidth="100">

                                <div style="box-sizing: border-box; margin-top: 12px" class=" text-secondary text-xs font-weight-bold  text-center align-items-center ">

                                    @stringHelper.formatStatusOrder(@context.Status)
                                </div>
                            </GridColumn>

                            <GridColumn Sortable="false"
                                        TItem="@ProductOrderWithUserResponse"
                                        Filterable="false"
                                        FilterOperator="FilterOperator.None"
                                        HeaderText="Tên Khách Hàng" PropertyName="userName" FilterTextboxWidth="100">

                                <div style="box-sizing: border-box; margin-top: 12px" class=" text-secondary text-xs font-weight-bold  text-center align-items-center ">  @context.User.Email</div>
                            </GridColumn>

                            <GridColumn Sortable="false"
                                        TItem="@ProductOrderWithUserResponse"
                                        Filterable="false"
                                        HeaderText="Tên Sản Phẩm" PropertyName="productName" FilterTextboxWidth="100">

                                <div style="box-sizing: border-box; margin-top: 12px" class=" text-secondary text-xs font-weight-bold  text-center align-items-center ">  @context.Product.Name</div>
                            </GridColumn>

                            <GridColumn Sortable="false"
                                        TItem="@ProductOrderWithUserResponse"
                                        Filterable="false"
                                        HeaderText="Thao Tác">

                                <div class="d-flex justify-content-center  text-center d-flex">
                                    <ButtonComponent ClassEl="mx-1" OnButtonClick="() => HandleShowCanvas(context.Product.Id,context.OrderId)">
                                        <Icon Name="IconName.Gear" Color="IconColor.White"> </Icon>
                                    </ButtonComponent>

                                    <ButtonComponent ClassEl="mx-1" color="ButtonColor.Danger" OnButtonClick="() => HandleDelete(context.OrderId)">
                                        <Icon Name="IconName.XLg" Color="IconColor.White"> </Icon>
                                    </ButtonComponent>
                                </div>
                            </GridColumn>
                        </Grid>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <OffCanvasComponent @ref="OffcanvasEl"
                        title="Chỉnh Sửa Đơn Đặt Hàng">

        <FormComponent @ref="@formEl"
                       model=@orderUpdateRequest
                       OnSubmitForm="HandleOnSubmitForm">

            <DataAnnotationsValidator />

            @if (orderUpdateRequest != null && allOrder != null)
            {

                <InputWrapperComponent labelTitle="Trạng Thái Đơn Hàng">

                    <InputSelect class="form-control" @bind-Value="orderUpdateRequest.Status">

                        @foreach (var value in Enum.GetValues(typeof(DtoShared.Enums.StatusOrder)))
                        {
                            var name = Enum.GetName(typeof(DtoShared.Enums.StatusOrder), value);

                            <option value="@(value)">@stringHelper.GetDisplayName((DtoShared.Enums.StatusOrder)value)</option>
                        }
                    </InputSelect>

                    <div class="text-danger fs-6 fw-bolder " style="min-height:24px">

                        <ValidationMessage For="()=>orderUpdateRequest.Status">
                        </ValidationMessage>
                    </div>
                </InputWrapperComponent>

                <InputWrapperComponent labelTitle="Số Lượng ">

                    <InputNumber class="form-control"
                                 @bind-Value="@orderUpdateRequest.quantity"></InputNumber>

                    <div class="text-danger fs-6 fw-bolder" style="min-height:24px">

                        <ValidationMessage For="()=>orderUpdateRequest.quantity">
                        </ValidationMessage>
                    </div>
                </InputWrapperComponent>

                <InputText hidden class="form-control"
                           @bind-Value="@orderUpdateRequest.ProductId"></InputText>

            }

            <ButtonComponent type=ButtonType.Submit> Submit</ButtonComponent>
        </FormComponent>
    </OffCanvasComponent>

    @*<OffCanvasComponent @ref="OffcanvasEl2"
                            title="Tạo Đơn Đặt Hàng">

           <FormComponent @ref="@formEl2"
                          model=@orderCreateRequest
                          OnSubmitForm="@HandleOnSubmitForm2">
               <DataAnnotationsValidator />

               <InputWrapperComponent labelTitle="Trạng Thái Đơn Hàng">

                   <InputSelect class="form-control" @bind-Value="orderCreateRequest.Status">

                       @foreach (var value in Enum.GetValues(typeof(DtoShared.Enums.StatusOrder)))
                       {
                           var name = Enum.GetName(typeof(DtoShared.Enums.StatusOrder), value);

                           <option value="@(value)">@stringHelper.GetDisplayName((DtoShared.Enums.StatusOrder)value)</option>
                       }
                   </InputSelect>

                   <div class="text-danger fs-6 fw-bolder " style="min-height:24px">

                       <ValidationMessage For="()=>orderCreateRequest.Status">
                       </ValidationMessage>
                   </div>
               </InputWrapperComponent>

               <InputWrapperComponent labelTitle="Name">

                   <InputText class="form-control"
                              @bind-Value="@orderCreateRequest."></InputText>

                   <div class="text-danger fs-6 fw-bolder" style="min-height:24px">

                       <ValidationMessage For="()=>orderCreateRequest.Name">
                       </ValidationMessage>
                   </div>
               </InputWrapperComponent>

               <ButtonComponent type=ButtonType.Submit> Submit</ButtonComponent>
           </FormComponent>
        </OffCanvasComponent>*@

    <ConfirmComponent @ref="confirmComponent"></ConfirmComponent>

}

@code {

    [Inject] private IOrderApi orderApi { get; set; }
    [Inject] protected ToastService ToastService { get; set; } = default!;

    [Inject] private JsHelper jsHelper { get; set; }
    [Inject] private StringHelper stringHelper { get; set; }

    public PaggingResponse<ProductOrderWithUserResponse> allOrder;
    public CountOrderInfo orderinfo;

    private DtoShared.FetchData.FetchDataOrderRequest request;

    private int pageNumber = 0;
    private int pageSize = 8;
    private string Search = "";
    private SortOrderOption Sort = SortOrderOption.Descending;
    private DtoShared.Enums.StatusOrder? SearchWithFilter = null;

    private Grid<ProductOrderWithUserResponse> grid;

    //component

    public OffCanvasComponent OffcanvasEl = default!;
    public OffCanvasComponent OffcanvasEl2 = default!;
    public ConfirmComponent confirmComponent = default!;
    public ShopBlazor.Component.Form.FormComponent formEl = default!;
    public ShopBlazor.Component.Form.FormComponent formEl2 = default!;
    public ShopBlazor.Component.Form.InputWrapperComponent? nameInput;

    public ProductOrderWithUserResponse? orderUpdateResponse { get; set; } = new ProductOrderWithUserResponse();
    public OrderUpdate? orderUpdateRequest { get; set; } = new OrderUpdate();
    public OrderRequest? orderCreateRequest { get; set; } = new OrderRequest();

    public bool IsOrderCreateRequest { get; set; } = false;

    private string dynamicTitle = "";

    protected async override Task OnInitializedAsync()
    {
        //Catetory = await orderClient.GetOrderByID(10);
        //JsHelper.LogObject(Catetory);

        await callData();

    }

    protected async override Task OnParametersSetAsync()
    {

        await base.OnParametersSetAsync();
    }

    private async Task callData()
    {
        request = new FetchDataOrderRequest
        {
            PageNumber = pageNumber != 0 ? pageNumber : 1,
            Sort = Sort,
            PageSize = pageSize,
            SearchWithFilter = SearchWithFilter,

        };

        allOrder = await orderApi.FetchOrder(request);

        orderinfo = await orderApi.CountSoldInfo();

        jsHelper.LogObject(allOrder);

        await InvokeAsync(StateHasChanged);
        await grid.RefreshDataAsync();

    }

    public async Task<GridDataProviderResult<ProductOrderWithUserResponse>> OrderDataProvider(GridDataProviderRequest<ProductOrderWithUserResponse> request)
    {

        pageNumber = request.PageNumber;

        string sortString = "";

        if (request.Sorting is not null && request.Sorting.Any())
        {
            if (request.Sorting.FirstOrDefault()!.SortString == "Time")
            {

                Sort = request.Sorting.FirstOrDefault().SortDirection == SortDirection.Ascending ? SortOrderOption.Ascending : SortOrderOption.Descending;

            }

        }

        //Search = "";

        if (request.Filters is not null && request.Filters.Any())
        {

            foreach (var filter in request.Filters)
            {
                string propertyName = filter.PropertyName;
                string filterValue = filter.Value;

                if (propertyName == "Status")
                {

                    Search = filterValue;

                    Console.WriteLine(filterValue);

                }

            }

        }
        else
        {
            Search = "";
        }

        await callData();

        return await Task.FromResult(new GridDataProviderResult<ProductOrderWithUserResponse> { Data = allOrder.Data, TotalCount = (allOrder.TotalPage * pageSize) });

    }

    protected async Task HandleShowCanvas(string productId, string orderId)
    {

        OffcanvasEl.offcanvas.ShowAsync();

        orderUpdateResponse = await orderApi.GetOrderByID(productId, orderId);

        orderUpdateRequest = new OrderUpdate()
        {
            Status = orderUpdateResponse.Status,

            ProductId = orderUpdateResponse.Product.Id,
            quantity = orderUpdateResponse.quantity

        };

    }

    protected async Task HandleDelete(string orderId)
    {

        var confirmation = await confirmComponent.dialog.ShowAsync(

           title: "Bạn Có Chắc Là Muốn Xóa ?",
           message1: "Nếu Xóa Thì Không Thể Quay Lại"

           )

            ;

        if (confirmation)
        {

            OrderDeleteResponse result = await orderApi.DeleteOrderById(orderId);

            if (result != null)
            {
                await callData();
                ToastService.Notify(new(ToastType.Success, $"Thong bao", "Xóa Thành Công"));
            }

        }
        else
        {
            // do something
        }

    }

    protected async Task HandleShowCanvas2()
    {

        OffcanvasEl2.offcanvas.ShowAsync();

    }

    async void HandleOnSubmitForm(EditContext editContext)
    {

        jsHelper.LogObject(orderUpdateRequest);

        var result =

          await orderApi.UpdateOrder(

              orderUpdateResponse.OrderId,
              orderUpdateRequest

          );

        if (result != null)
        {

            await callData();
            ToastService.Notify(new(ToastType.Success, $"Thong bao", "Update thành công"));

        }

    }

    // async Task HandleOnSubmitForm2(EditContext editContext)
    // {

    //     var result =

    //    await orderApi.CreateOrder(
    //orderCreateRequest
    //);
    //     if (result != null)
    //     {

    //         await callData();
    //         ToastService.Notify(new(ToastType.Success, $"Thong bao", "Tạo  thành công"));

    //     }

    // }

    public async Task HandleFilterChanged(ChangeEventArgs e)
    {
        var selectedValue = e.Value;
        if (Enum.TryParse<DtoShared.Enums.StatusOrder>(selectedValue.ToString(), out DtoShared.Enums.StatusOrder result))
        {
            SearchWithFilter = result;
        }
        else
        {
            SearchWithFilter = null;
        }
        callData();

    }

}