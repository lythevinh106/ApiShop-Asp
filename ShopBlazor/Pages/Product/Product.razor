@page "/product"
@using DtoShared.Pagging
@using DtoShared.ModulesDto
@using DtoShared.FetchData
@using ShopBlazor.Services.Product
@using ShopBlazor.Component;
@inject IDispatcher _dispatcher
@using ShopBlazor.Component.Form

<style>

    .custom-filter .dropdown-menu {
        display: none !important;
    }

    .custom-filter button {
        display: none !important;
    }

    .custom-filter input {
        padding: 6px 8px !important;
        position: relative;
        width: 100% !important;
    }

    .custom-filter th {
        padding: 6px 6px !important;
    }

    /*
        td {
            display:flex;
            text-align:center;
        }*/
</style>

@if (@allProduct == null)
{

}
else
{

    <div class="row">

        <div class="col-12  ">

            <div class="card mb-4 pb-4 bg-gray-100 ">

                <div class="rounded-2 background-module p-0  align-items-center mt-0  d-flex position-relative

                     " style="background-image: url(template/img/curved-images/curved0.jpg);
                   background-position-y: 50%;background-size:cover ; min-height:200px;">

                    <span class="mask bg-gradient-primary opacity-50 top-0 start-0 w-100 h-100 position-absolute "
                          style=" background-image:
                      linear-gradient(310deg, #7928CA 0%, #FF0080 100%);background-position:center center ;background-size:cover"></span>

                    <div class=" rounded-4 card-header  py-4  shadow-blur blur d-flex justify-content-between align-items-center   position-absolute start-50 translate-middle-x"
                         style="bottom: -15%; width: 92%; -webkit-backdrop-filter: saturate(200%) blur(30px);">

                        <div class="fw-normal d-flex align-items-center  ">

                            <ButtonComponent ClassEl="mx-1 ms-3" isDisable="true" size="Size.Large" color="ButtonColor.Primary">
                                <Icon Name="IconName.Box2Fill" Color="IconColor.White"> </Icon>
                            </ButtonComponent>
                            <span class="h5 ms-2">
                                Product
                            </span>
                        </div>

                        <ButtonComponent ClassEl="mx-1 ms-3" color="ButtonColor.Primary"
                                         OnButtonClick="HandleShowCanvas2">
                            <span class="me-2 fw-bolder fs-6">Tạo</span> <Icon Name="IconName.PlusCircleFill" Color="IconColor.White"> </Icon>
                        </ButtonComponent>
                    </div>
                </div>

                <div class="card-body px-0 pt-0 pb-2 mt-5">
                    <div class="table-responsive p-0 position-relative " style="min-height:50vh">

                        <Grid ItemsPerPageText=""
                              @ref="grid"
                              PageSizeSelectorItems="Enumerable.Range(1, 3).ToArray()"
                              PaginationItemsTextFormat=""
                              DataProvider="ProductDataProvider"
                              Class="table table-hover table-bordered table-striped"
                              TItem="ProductResponse"
                              Responsive="true"
                              PageSize="@pageSize"
                              AllowSorting="true"
                              AllowPaging="true"
                              AllowFiltering="true"
                              FiltersRowCssClass="custom-filter"
                              HeaderRowCssClass="text-uppercase text-secondary text-sm font-weight-bolder opacity-7  text-center">

                            @*<GridColumn TItem="ProductResponse" HeaderText="Id"
                                            Class=""
                                            Filterable="false"
                                            PropertyName="Id"
                                            SortString="Id"
                                            SortKeySelector="c=>c.Id"
                                            FilterTextboxWidth="100"
                                            IsDefaultSortColumn="true"
                                            SortDirection="SortDirection.Descending">

                                    <div style="box-sizing: border-box; margin-top: 12px" class=" text-secondary text-xs font-weight-bold  text-center align-items-center ">  @context.Id</div>
                                </GridColumn>*@

                            <GridColumn Sortable="false"
                                        TItem="ProductResponse"
                                        Filterable="true"
                                        FilterOperator="FilterOperator.None"
                                        HeaderText="Name" PropertyName="Name" FilterTextboxWidth="100">

                                <div style="box-sizing: border-box; margin-top: 12px" class=" text-secondary text-xs font-weight-bold  text-center align-items-center ">  @context.Name</div>
                            </GridColumn>

                            <GridColumn Sortable="false"
                                        TItem="ProductResponse"
                                        Filterable="true"
                                        FilterOperator="FilterOperator.None"
                                        HeaderText="Giá" PropertyName="Price" FilterTextboxWidth="100">

                                <div style="box-sizing: border-box; margin-top: 12px" class=" text-secondary text-xs font-weight-bold  text-center align-items-center ">  @context.Price</div>
                            </GridColumn>

                            <GridColumn Sortable="false"
                                        TItem="ProductResponse"
                                        Filterable="true"
                                        FilterOperator="FilterOperator.None"
                                        HeaderText="Danh Mục" PropertyName="CategoryId" FilterTextboxWidth="100">

                                <div style="box-sizing: border-box; margin-top: 12px" class=" text-secondary text-xs font-weight-bold  text-center align-items-center ">  @context.CategoryId</div>
                            </GridColumn>

                            <GridColumn Sortable="false"
                                        TItem="ProductResponse"
                                        Filterable="false"
                                        HeaderText="Name">

                                <div class="d-flex justify-content-center  text-center d-flex">

                                    <ButtonComponent ClassEl="mx-1" OnButtonClick="() => HandleShowCanvas(context.Id)">
                                        <Icon Name="IconName.Gear" Color="IconColor.White"> </Icon>
                                    </ButtonComponent>

                                    <ButtonComponent ClassEl="mx-1" color="ButtonColor.Danger" OnButtonClick="() => HandleDelete(context.Id)">
                                        <Icon Name="IconName.XLg" Color="IconColor.White"> </Icon>
                                    </ButtonComponent>
                                </div>
                            </GridColumn>
                        </Grid>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <OffCanvasComponent @ref="OffcanvasEl"
                        title="Chỉnh Sửa Danh Mục">

        <FormComponent @ref="@formEl"
                       model=@productUpdateRequestClient
                       OnSubmitForm="@HandleOnSubmitForm">

            <DataAnnotationsValidator />

            @if (productUpdateRequestClient != null && allProduct != null)
            {

                <InputWrapperComponent labelTitle="Tên">

                    <InputText class="form-control" DisplayName="chcccccccc"
                               @bind-Value="@productUpdateRequestClient.Name"></InputText>

                    <div class="text-danger fs-6 fw-bolder" style="min-height:24px">

                        <ValidationMessage  For="()=>productUpdateRequest.Name">
                        </ValidationMessage>
                    </div>
                </InputWrapperComponent>

                <InputWrapperComponent labelTitle="Giá">

                    <InputNumber class="form-control"
                                 @bind-Value="productUpdateRequestClient.Price"></InputNumber>

                    <div class="text-danger fs-6 fw-bolder" style="min-height:24px">

                        <ValidationMessage For="()=>productUpdateRequestClient.Price">
                        </ValidationMessage>
                    </div>
                </InputWrapperComponent>

                <InputWrapperComponent labelTitle="Giá">

                    <InputTextArea class="form-control" DisplayName="chcccccccc"
                                   @bind-Value="productUpdateRequestClient.Description"></InputTextArea>

                    <div class="text-danger fs-6 fw-bolder" style="min-height:24px">

                        <ValidationMessage For="()=>productUpdateRequestClient.Description">
                        </ValidationMessage>
                    </div>
                </InputWrapperComponent>

                <InputWrapperComponent labelTitle="Ảnh">

                    <InputFile    OnChange="OnInputFileChange" class="form-control"
                               @bind-Value="productUpdateRequestClient.ImageFile"></InputFile>

                    <div class="text-danger fs-6 fw-bolder" style="min-height:24px">

                        <ValidationMessage For="()=>productUpdateRequestClient.ImageFile">
                        </ValidationMessage>
                    </div>

                    <Button @ref="saveImage" Color="ButtonColor.None" Size="Size.ExtraLarge">
                        <div style="width:150px" class="h-auto">

                            <img src="@productUpdateRequestClient.Image" class="w-100 h-auto object-fit-cover " alt="Alternate Text" />
                        </div>
                    </Button>
                </InputWrapperComponent>

            }

        <ButtonComponent type=ButtonType.Submit> Cập Nhật</ButtonComponent>
        </FormComponent>
    </OffCanvasComponent>

    <OffCanvasComponent @ref="OffcanvasEl2"   OnffcanvasHidding="handleOffCanvas2Close"
                        title="Tạo Sản Phẩm"
                        
                         
                        >

        <FormComponent @ref="@formEl2"
                       model=@productCreateRequestClient
                       OnSubmitForm="HandleOnSubmitForm2">

            <DataAnnotationsValidator />

            <InputWrapperComponent labelTitle="Tên">

                <InputText class="form-control"
                           @bind-Value="@productCreateRequestClient.Name"></InputText>

                <div class="text-danger fs-6 fw-bolder" style="min-height:24px">

                    <ValidationMessage For="()=>productCreateRequestClient.Name">
                    </ValidationMessage>
                </div>
            </InputWrapperComponent>

            <InputWrapperComponent labelTitle="Giá">

                <InputNumber class="form-control"
                             @bind-Value="productCreateRequestClient.Price"></InputNumber>

                <div class="text-danger fs-6 fw-bolder" style="min-height:24px">

                    <ValidationMessage For="()=>productCreateRequestClient.Price">
                    </ValidationMessage>
                </div>
            </InputWrapperComponent>

            <InputWrapperComponent labelTitle="Mô tả">

                <InputTextArea class="form-control"
                               @bind-Value="productCreateRequestClient.Description"></InputTextArea>

                <div class="text-danger fs-6 fw-bolder" style="min-height:24px">

                    <ValidationMessage For="()=>productCreateRequestClient.Description">
                    </ValidationMessage>
                </div>
            </InputWrapperComponent>

            <InputWrapperComponent labelTitle="Ảnh">

                <InputFile accept=".jpg, .png, .gif" OnChange="OnInputFileChange2" class="form-control"
                           @bind-Value="productCreateRequestClient.ImageFile"></InputFile>

                <div class="text-danger fs-6 fw-bolder" style="min-height:24px">

                    <ValidationMessage For="()=>productCreateRequestClient.ImageFile">
                    </ValidationMessage>

                </div>
                @if (@productCreateRequestClient?.Image != null)
                {
                    <Button @ref="saveImage" Color="ButtonColor.None" Size="Size.ExtraLarge">

                        <div style="width:150px" class="h-auto">

                            <img src="@productCreateRequestClient.Image" class="w-100 h-auto object-fit-cover " alt="Alternate Text" />
                        </div>
                    </Button>
                }
            </InputWrapperComponent>


            <InputWrapperComponent labelTitle="CategoryId">

                <InputSelect class="form-control" @bind-Value="productCreateRequestClient.CategoryId">
                    <option>Select a priority</option>


                    @if (listCategoryName!=null)
                    {
                        @foreach (var item in listCategoryName)
                        {
                            <option value="@item.Id">@item.Name</option>
                        }
                    }

                </InputSelect>

                <div class="text-danger fs-6 fw-bolder" style="min-height:24px">

                    <ValidationMessage For="()=>productCreateRequestClient.CategoryId">
                    </ValidationMessage>
                </div>
            </InputWrapperComponent>


            <ButtonComponent type=ButtonType.Submit> Tạo</ButtonComponent>




        </FormComponent>
    </OffCanvasComponent>

    <ConfirmComponent @ref="confirmComponent"></ConfirmComponent>

}

@code {

    [Inject] private IProductApi productApi { get; set; }
    [Inject] private ShopBlazor.Services.Category.ICategoryApi cateogryApi { get; set; }
    [Inject] protected ToastService ToastService { get; set; } = default!;

    [Inject] private JsHelper jsHelper { get; set; }

    public PaggingResponse<ProductResponse> allProduct;
    private DtoShared.FetchData.FetchDataProductRequest request;

    private int pageNumber = 0;
    private int pageSize = 8;
    private string Search = "";
    private SortProductOption Sort = SortProductOption.Descending;

    private Grid<ProductResponse> grid;

    //component

    public OffCanvasComponent OffcanvasEl = default!;
    public OffCanvasComponent OffcanvasEl2 = default!;
    public ConfirmComponent confirmComponent = default!;
    public ShopBlazor.Component.Form.FormComponent formEl = default!;
    public ShopBlazor.Component.Form.FormComponent formEl2 = default!;
    public ShopBlazor.Component.Form.InputWrapperComponent? nameInput;

    private Button saveImage = default!;

    public ProductResponse? productUpdateResponse { get; set; } = new ProductResponse();
    public ProductUpdate? productUpdateRequest { get; set; } = new ProductUpdate();
    public ProductUpdateRequestClient? productUpdateRequestClient { get; set; } = new ProductUpdateRequestClient();
    public ProductCreateRequestClient? productCreateRequestClient { get; set; } = new ProductCreateRequestClient();
    public ProductRequest? productCreateRequest { get; set; } = new ProductRequest();

    public bool IsProductCreateRequest { get; set; } = false;

    public List<CategoryResponse> listCategoryName = new List<CategoryResponse>();

    private string dynamicTitle = "";

    protected async override Task OnInitializedAsync()
    {
        //Catetory = await productClient.GetProductByID(10);
        //JsHelper.LogObject(Catetory);

        await callData();

    }

    protected async override Task OnParametersSetAsync()
    {

        await base.OnParametersSetAsync();
    }

    private async Task callData()
    {
        request = new FetchDataProductRequest
        {
            PageNumber = pageNumber != 0 ? pageNumber : 1,
            Sort = Sort,
            PageSize = pageSize,
            Search = Search
        };

        allProduct = await productApi.FetchProduct(request);

        jsHelper.LogObject(allProduct);

        await InvokeAsync(StateHasChanged);
        await grid.RefreshDataAsync();

    }

    public async Task<GridDataProviderResult<ProductResponse>> ProductDataProvider(GridDataProviderRequest<ProductResponse> request)
    {

        pageNumber = request.PageNumber;

        if (request.Sorting is not null && request.Sorting.Any())
        {
            if (request.Sorting.FirstOrDefault()!.SortString == "Id")
            {

                Sort = request.Sorting.FirstOrDefault().SortDirection == SortDirection.Ascending ? SortProductOption.Ascending : SortProductOption.Descending;

            }

        }

        //Search = "";

        if (request.Filters is not null && request.Filters.Any())
        {

            foreach (var filter in request.Filters)
            {
                string propertyName = filter.PropertyName;
                string filterValue = filter.Value;

                if (propertyName == "Name")
                {

                    Search = filterValue;

                    Console.WriteLine(filterValue);

                }

            }

        }
        else
        {
            Search = "";
        }

        await callData();

        return await Task.FromResult(new GridDataProviderResult<ProductResponse> { Data = allProduct.Data, TotalCount = (allProduct.TotalPage * pageSize) });

    }

    protected async Task HandleShowCanvas(string productId)
    {

        OffcanvasEl.offcanvas.ShowAsync();

        productUpdateResponse = await productApi.GetProductByID(productId);

        productUpdateRequestClient = new ProductUpdateRequestClient()
        {
            Name = productUpdateResponse.Name,
            Price = productUpdateResponse.Price,
            CategoryId = productUpdateResponse.CategoryId,
            Image = productUpdateResponse.Image,
            Description = productUpdateResponse.Description,

        };

    }

    protected async Task HandleDelete(string productId)
    {

        var confirmation = await confirmComponent.dialog.ShowAsync(

           title: "Bạn Có Chắc Là Muốn Xóa ?",
           message1: "Nếu Xóa Thì Không Thể Quay Lại"

           )

            ;

        if (confirmation)
        {

            ProductResponse result =

             await productApi.DeleteProductById(
             productId);

            if (result != null)
            {
                await callData();
                ToastService.Notify(new(ToastType.Success, $"Thông Báo", "Xóa Thành Công"));
            }

        }
        else
        {
            // do something
        }

    }

    protected async Task HandleShowCanvas2()
    {

        OffcanvasEl2.offcanvas.ShowAsync();

        listCategoryName = await cateogryApi.All();






    }

    async void HandleOnSubmitForm(EditContext editContext)
    {

        using var formData = new MultipartFormDataContent();

        // jsHelper.LogObject(productUpdateRequestClient);

        var result =

        await productApi.UpdateProduct(
        productUpdateResponse.Id,
        productUpdateRequestClient
        );

        if (result != null)
        {

            await callData();
            ToastService.Notify(new(ToastType.Success, $"Thong bao", "Update thành công"));

        }

    }

    async Task HandleOnSubmitForm2(EditContext editContext)
    {

        var result =

     await productApi.CreateProduct(
           productCreateRequestClient
      );
        if (result != null)
        {

            await callData();
            ToastService.Notify(new(ToastType.Success, $"Thong bao", "Tạo  thành công"));

        }

    }




    private async Task OnInputFileChange(InputFileChangeEventArgs inputFileChangeEvent)
    {
        //get the file
        var file = inputFileChangeEvent.File;
        productUpdateRequestClient.ImageFile = file;

        var buffer = new byte[file.Size];

        saveImage.ShowLoading("Loading...");

        await file.OpenReadStream(1512000).ReadAsync(buffer);

        saveImage.HideLoading();

        ////convert byte array to base 64 string
        productUpdateRequestClient.Image = $"data:image/png;base64,{Convert.ToBase64String(buffer)}";
    }

    private async Task OnInputFileChange2(InputFileChangeEventArgs inputFileChangeEvent)
    {
        //get the file
        var file = inputFileChangeEvent.File;
        productCreateRequestClient.ImageFile = file;

        var buffer = new byte[file.Size];

        saveImage.ShowLoading("Loading...");

        await file.OpenReadStream(1512000).ReadAsync(buffer);

        saveImage.HideLoading();

        ////convert byte array to base 64 string
        productCreateRequestClient.Image = $"data:image/png;base64,{Convert.ToBase64String(buffer)}";
    }


    private async Task handleOffCanvas2Close()
    {

        productCreateRequestClient = new ProductCreateRequestClient();

    }
}